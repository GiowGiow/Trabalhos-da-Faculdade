import pandas as pd
import numpy as np

class Item:
    """
    Data holder for our item.
    Parameters
    ----------
    id : int
    title : str
    genre : dict[str, float]
        The item/movie's genre distribution, where the key
        represents the genre and value corresponds to the
        ratio of that genre.
    score : float
        Score for the item, potentially generated by some
        recommendation algorithm.
    """

    def __init__(self, _id, title, genres, score=None):
        self.id = _id
        self.title = title
        self.score = score
        self.genres = genres

    def __repr__(self):
        return self.title


def create_item_mapping(df_item, item_col, title_col, genre_col):
    """Create a dictionary of item id to Item lookup."""
    item_mapping = {}
    for row in df_item.itertuples():
        item_id = getattr(row, item_col)
        item_title = getattr(row, title_col)
        item_genre = getattr(row, genre_col)

        splitted = item_genre.split(',')
        genre_ratio = 1. / len(splitted)
        item_genre = {genre.strip('[').strip(']'): genre_ratio for genre in splitted}

        item = Item(item_id, item_title, item_genre)
        item_mapping[item_id] = item

    return item_mapping

def read_steam_games(data_filepath):
    return pd.read_csv('{}/steam_games.csv'.format(data_filepath), index_col="Unnamed: 0")

def read_user_item_playtime(data_filepath):
    user_items_playtime_ = '{}/user_items_playtime.csv'.format(data_filepath)
    return pd.read_csv(user_items_playtime_)

def normalize_hours_matrix(hour_matrix):
    # nonlinear scaling (normalize hours into 0-1 interval for rating)
    xmax = 50 * 60  # 50 hrs
    return np.tanh(hour_matrix * 2/ xmax)